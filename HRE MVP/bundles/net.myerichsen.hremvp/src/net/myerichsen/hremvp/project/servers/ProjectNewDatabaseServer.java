package net.myerichsen.hremvp.project.servers;

import java.sql.Connection;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.logging.Level;
import java.util.logging.Logger;

import javax.inject.Inject;

import org.eclipse.core.runtime.IProgressMonitor;
import org.eclipse.e4.ui.di.UISynchronize;
import org.eclipse.jface.dialogs.ProgressMonitorDialog;
import org.eclipse.swt.widgets.Shell;

import net.myerichsen.hremvp.HreH2ConnectionPool;
import net.myerichsen.hremvp.providers.H2TableProvider;

/**
 * Create and open a new HRE project database
 * <p>
 * Must be updated each time the table structure is changed.
 * <p>
 * Generate a complete DDL in the Eclipse Data Development perspective. Change
 * each line to something like
 * <p>
 * <code>
 * "CREATE TABLE PERSONS... INTEGER );",
 * </code>
 * <p>
 * This is perhaps done best in MS Word.
 * <p>
 * Then edit with RegEx:
 * <p>
 * <table border="1">
 * <tr>
 * <td>UNIQUE INDEX \S* ON</td>
 * <td>UNIQUE INDEX ON</td>
 * <tr>
 * <tr>
 * <td>CONSTRAINT \S*</td>
 * <td></td>
 * <tr>
 * </table>
 * <p>
 * Finally sort the <code>ALTER TABLE</code> lines and eliminate duplicates.
 * This is perhaps done best in MS Excel.
 *
 * @author Michael Erichsen, &copy; History Research Environment Ltd., 2018-2019
 * @version 9. jun. 2019
 *
 */
public class ProjectNewDatabaseServer {
	private static final Logger LOGGER = Logger
			.getLogger(Logger.GLOBAL_LOGGER_NAME);
	private static final String[] createStatementArray = {
			"CREATE TABLE PERSONS ( PERSON_PID INTEGER NOT NULL, INSERT_TSTMP TIMESTAMP NOT NULL, UPDATE_TSTMP TIMESTAMP NOT NULL, TABLE_ID INTEGER DEFAULT 15 NOT NULL, BIRTH_DATE_PID INTEGER, DEATH_DATE_PID INTEGER );",
			"CREATE TABLE PARENT_ROLES ( PARENT_ROLE_PID INTEGER NOT NULL, ABBREVIATION CHAR(8) NOT NULL, LABEL_PID INTEGER NOT NULL, INSERT_TSTMP TIMESTAMP NOT NULL, UPDATE_TSTMP TIMESTAMP NOT NULL, TABLE_ID INTEGER DEFAULT 26 NOT NULL );",
			"CREATE TABLE EVENT_TYPES ( EVENT_TYPE_PID INTEGER NOT NULL, ABBREVIATION CHAR(8) NOT NULL, INSERT_TSTMP TIMESTAMP NOT NULL, UPDATE_TSTMP TIMESTAMP NOT NULL, TABLE_ID INTEGER DEFAULT 23 NOT NULL, LABEL_PID INTEGER NOT NULL );",
			"CREATE TABLE DICTIONARY ( DICTIONARY_PID INTEGER NOT NULL, LABEL_PID INTEGER NOT NULL, ISO_CODE CHAR(4) NOT NULL, LABEL VARCHAR(2147483647) NOT NULL, INSERT_TSTMP TIMESTAMP NOT NULL, UPDATE_TSTMP TIMESTAMP NOT NULL, TABLE_ID INTEGER DEFAULT 6 NOT NULL, LABEL_TYPE VARCHAR(2147483647) );",
			"CREATE TABLE LOCATIONS ( LOCATION_PID INTEGER NOT NULL, PRIMARY_LOCATION BOOLEAN NOT NULL, X_COORDINATE DECIMAL(65535 , 32767), Y_COORDINATE DECIMAL(65535 , 32767), Z_COORDINATE DECIMAL(65535 , 32767), INSERT_TSTMP TIMESTAMP NOT NULL, UPDATE_TSTMP TIMESTAMP NOT NULL, TABLE_ID INTEGER DEFAULT 9 NOT NULL, FROM_DATE_PID INTEGER, TO_DATE_PID INTEGER );",
			"CREATE TABLE USERIDS ( USERID_PID INTEGER NOT NULL, PERSON_PID INTEGER NOT NULL, INSERT_TSTMP TIMESTAMP NOT NULL, UPDATE_TSTMP TIMESTAMP NOT NULL, TABLE_ID INTEGER DEFAULT 20 NOT NULL );",
			"CREATE TABLE LOCATION_NAME_STYLES ( LOCATION_NAME_STYLE_PID INTEGER NOT NULL, ISO_CODE CHAR(4) NOT NULL, FROM_DATE_PID INTEGER, TO_DATE_PID INTEGER, LABEL_PID INTEGER NOT NULL, INSERT_TSTMP TIMESTAMP NOT NULL, UPDATE_TSTMP TIMESTAMP NOT NULL, TABLE_ID INTEGER DEFAULT 16 NOT NULL );",
			"CREATE TABLE PARTNER_ROLES ( PARTNER_ROLE_PID INTEGER NOT NULL, ABBREVIATION CHAR(8) NOT NULL, LABEL_PID INTEGER NOT NULL, INSERT_TSTMP TIMESTAMP NOT NULL, UPDATE_TSTMP TIMESTAMP NOT NULL, TABLE_ID INTEGER DEFAULT 27 NOT NULL );",
			"CREATE TABLE LOCATION_EVENTS ( LOCATION_EVENTS_PID INTEGER NOT NULL, EVENT_PID INTEGER NOT NULL, LOCATION_PID INTEGER NOT NULL, PRIMARY_EVENT BOOLEAN NOT NULL, PRIMARY_LOCATION BOOLEAN NOT NULL, INSERT_TSTMP TIMESTAMP NOT NULL, UPDATE_TSTMP TIMESTAMP NOT NULL, TABLE_ID INTEGER DEFAULT 4 NOT NULL );",
			"CREATE TABLE LOCATION_NAMES ( LOCATION_NAME_PID INTEGER NOT NULL, LOCATION_PID INTEGER NOT NULL, PRIMARY_LOCATION_NAME BOOLEAN NOT NULL, LOCATION_NAME_STYLE_PID INTEGER NOT NULL, PREPOSITION VARCHAR(2147483647), INSERT_TSTMP TIMESTAMP NOT NULL, UPDATE_TSTMP TIMESTAMP NOT NULL, TABLE_ID INTEGER DEFAULT 8 NOT NULL, FROM_DATE_PID INTEGER, TO_DATE_PID INTEGER );",
			"CREATE TABLE EVENTS ( EVENT_PID INTEGER NOT NULL, INSERT_TSTMP TIMESTAMP NOT NULL, UPDATE_TSTMP TIMESTAMP NOT NULL, TABLE_ID INTEGER DEFAULT 12 NOT NULL, FROM_DATE_PID INTEGER, TO_DATE_PID INTEGER, EVENT_TYPE_PID INTEGER NOT NULL );",
			"CREATE TABLE SEX_TYPES ( SEX_TYPE_PID INTEGER NOT NULL, ABBREVIATION CHAR(1) NOT NULL, INSERT_TSTMP TIMESTAMP NOT NULL, UPDATE_TSTMP TIMESTAMP NOT NULL, TABLE_ID INTEGER DEFAULT 1 NOT NULL, LABEL_PID INTEGER NOT NULL );",
			"CREATE TABLE PARTNERS ( PARTNER_PID INTEGER NOT NULL, PARTNER1 INTEGER NOT NULL, PARTNER2 INTEGER NOT NULL, PRIMARY_PARTNER BOOLEAN NOT NULL, INSERT_TSTMP TIMESTAMP NOT NULL, UPDATE_TSTMP TIMESTAMP NOT NULL, TABLE_ID INTEGER DEFAULT 5 NOT NULL, FROM_DATE_PID INTEGER, TO_DATE_PID INTEGER, LANGUAGE_PID INTEGER, PARTNER_ROLE_PID INTEGER NOT NULL );",
			"CREATE TABLE PERSON_NAMES ( NAME_PID INTEGER NOT NULL, PERSON_PID INTEGER NOT NULL, PRIMARY_NAME BOOLEAN, NAME_STYLE_PID INTEGER NOT NULL, INSERT_TSTMP TIMESTAMP NOT NULL, UPDATE_TSTMP TIMESTAMP NOT NULL, TABLE_ID INTEGER DEFAULT 10 NOT NULL, FROM_DATE_PID INTEGER, TO_DATE_PID INTEGER );",
			"CREATE TABLE HDATES ( HDATE_PID INTEGER NOT NULL, INSERT_TSTMP TIMESTAMP NOT NULL, UPDATE_TSTMP TIMESTAMP NOT NULL, TABLE_ID INTEGER DEFAULT 3 NOT NULL, ORIGINAL_TEXT VARCHAR(160) NOT NULL, DATE DATE NOT NULL, SORT_DATE DATE NOT NULL, SURETY VARCHAR(10) NOT NULL );",
			"CREATE TABLE SEXES ( SEXES_PID INTEGER NOT NULL, PERSON_PID INTEGER NOT NULL, SEX_TYPE_PID INTEGER NOT NULL, PRIMARY_SEX BOOLEAN NOT NULL, INSERT_TSTMP TIMESTAMP NOT NULL, UPDATE_TSTMP TIMESTAMP NOT NULL, TABLE_ID INTEGER DEFAULT 11 NOT NULL, FROM_DATE_PID INTEGER, TO_DATE_PID INTEGER );",
			"CREATE TABLE PERSON_NAME_PARTS ( NAME_PART_PID INTEGER NOT NULL, NAME_PID INTEGER NOT NULL, LABEL VARCHAR(2147483647), PART_NO INTEGER NOT NULL, INSERT_TSTMP TIMESTAMP NOT NULL, UPDATE_TSTMP TIMESTAMP NOT NULL, TABLE_ID INTEGER DEFAULT 24 NOT NULL );",
			"CREATE TABLE PERSON_EVENTS ( PERSON_EVENT_PID INTEGER NOT NULL, EVENT_PID INTEGER NOT NULL, EVENT_ROLE_PID INTEGER NOT NULL, PERSON_PID INTEGER NOT NULL, PRIMARY_PERSON BOOLEAN NOT NULL, PRIMARY_EVENT BOOLEAN NOT NULL, INSERT_TSTMP TIMESTAMP NOT NULL, UPDATE_TSTMP TIMESTAMP NOT NULL, TABLE_ID INTEGER DEFAULT 2 NOT NULL);",
			"CREATE TABLE LOCATION_NAME_PARTS ( LOCATION_NAME_PART_PID INTEGER NOT NULL, LOCATION_NAME_PID INTEGER NOT NULL, LABEL VARCHAR(2147483647) NOT NULL, PART_NO INTEGER NOT NULL, INSERT_TSTMP TIMESTAMP NOT NULL, UPDATE_TSTMP TIMESTAMP NOT NULL, TABLE_ID INTEGER DEFAULT 18 NOT NULL );",
			"CREATE TABLE EVENT_ROLES ( EVENT_ROLE_PID INTEGER NOT NULL, EVENT_TYPE_PID INTEGER NOT NULL, ABBREVIATION CHAR(8) NOT NULL, LABEL_PID INTEGER NOT NULL, INSERT_TSTMP TIMESTAMP NOT NULL, UPDATE_TSTMP TIMESTAMP NOT NULL, TABLE_ID INTEGER DEFAULT 25 NOT NULL );",
			"CREATE TABLE PERSON_NAME_MAPS ( NAME_MAP_PID INTEGER NOT NULL, NAME_STYLE_PID INTEGER NOT NULL, PART_NO INTEGER NOT NULL, LABEL_PID INTEGER NOT NULL, INSERT_TSTMP TIMESTAMP NOT NULL, UPDATE_TSTMP TIMESTAMP NOT NULL, TABLE_ID INTEGER DEFAULT 13 NOT NULL );",
			"CREATE TABLE COMMIT_LOGS ( COMMIT_LOG_PID INTEGER NOT NULL, CHANGED_TABLE_ID INTEGER NOT NULL, CHANGED_RECORD_PID INTEGER NOT NULL, CHANGED_TIMESTAMP TIMESTAMP NOT NULL, USERID_PID INTEGER NOT NULL, COLUMN_NAME_LIST VARCHAR(2147483647) NOT NULL, COLUMN_DATA_LIST VARCHAR(2147483647) NOT NULL, INSERT_TSTMP TIMESTAMP NOT NULL, UPDATE_TSTMP TIMESTAMP NOT NULL, TABLE_ID INTEGER DEFAULT 19 NOT NULL );",
			"CREATE TABLE PARENTS ( PARENT_PID INTEGER NOT NULL, CHILD INTEGER NOT NULL, PARENT INTEGER NOT NULL, PRIMARY_PARENT BOOLEAN NOT NULL, INSERT_TSTMP TIMESTAMP NOT NULL, UPDATE_TSTMP TIMESTAMP NOT NULL, TABLE_ID INTEGER DEFAULT 22 NOT NULL, PARENT_ROLE_PID INTEGER NOT NULL, CHILD_ROLE_PID INTEGER );",
			"CREATE TABLE PERSON_NAME_STYLES ( NAME_STYLE_PID INTEGER NOT NULL, ISO_CODE CHAR(4) NOT NULL, LABEL_PID INTEGER NOT NULL, INSERT_TSTMP TIMESTAMP NOT NULL, UPDATE_TSTMP TIMESTAMP NOT NULL, TABLE_ID INTEGER DEFAULT 14 NOT NULL );",
			"CREATE TABLE LOCATION_NAME_MAPS ( LOCATION_NAME_MAP_PID INTEGER NOT NULL, LOCATION_NAME_STYLE_PID INTEGER NOT NULL, PART_NO INTEGER NOT NULL, LABEL_PID INTEGER NOT NULL, INSERT_TSTMP TIMESTAMP NOT NULL, UPDATE_TSTMP TIMESTAMP NOT NULL, TABLE_ID INTEGER DEFAULT 21 NOT NULL );",
			"CREATE TABLE LANGUAGES ( LANGUAGE_PID INTEGER NOT NULL, ISOCODE CHAR(4) NOT NULL, LABEL CHAR(30) NOT NULL, INSERT_TSTMP TIMESTAMP NOT NULL, UPDATE_TSTMP TIMESTAMP NOT NULL, TABLE_ID INTEGER DEFAULT 7 NOT NULL );" };

	private static final String[] createIndicesArray = {
			"CREATE INDEX ON COMMIT_LOGS (USERID_PID ASC);",
			"CREATE INDEX ON DICTIONARY (ISO_CODE ASC);",
			"CREATE INDEX ON EVENT_ROLES (EVENT_TYPE_PID ASC);",
			"CREATE INDEX ON EVENTS (EVENT_TYPE_PID ASC);",
			"CREATE INDEX ON EVENTS (FROM_DATE_PID ASC);",
			"CREATE INDEX ON EVENTS (TO_DATE_PID ASC);",
			"CREATE INDEX ON LOCATION_EVENTS (EVENT_PID ASC);",
			"CREATE INDEX ON LOCATION_EVENTS (LOCATION_PID ASC);",
			"CREATE INDEX ON LOCATION_NAME_MAPS (LOCATION_NAME_STYLE_PID ASC);",
			"CREATE INDEX ON LOCATION_NAME_PARTS (LOCATION_NAME_PID ASC);",
			"CREATE INDEX ON LOCATION_NAME_STYLES (FROM_DATE_PID ASC);",
			"CREATE INDEX ON LOCATION_NAME_STYLES (TO_DATE_PID ASC);",
			"CREATE INDEX ON LOCATION_NAMES (FROM_DATE_PID ASC);",
			"CREATE INDEX ON LOCATION_NAMES (LOCATION_NAME_STYLE_PID ASC);",
			"CREATE INDEX ON LOCATION_NAMES (LOCATION_PID ASC);",
			"CREATE INDEX ON LOCATION_NAMES (TO_DATE_PID ASC);",
			"CREATE INDEX ON LOCATIONS (FROM_DATE_PID ASC);",
			"CREATE INDEX ON LOCATIONS (TO_DATE_PID ASC);",
			"CREATE INDEX ON PARENTS (CHILD ASC);",
			"CREATE INDEX ON PARENTS (LANGUAGE_PID ASC);",
			"CREATE INDEX ON PARENTS (PARENT ASC);",
			"CREATE INDEX ON PARENTS (PARENT_ROLE_PID ASC);",
			"CREATE INDEX ON PARTNERS (FROM_DATE_PID ASC);",
			"CREATE INDEX ON PARTNERS (LANGUAGE_PID ASC);",
			"CREATE INDEX ON PARTNERS (PARTNER_ROLE_PID ASC);",
			"CREATE INDEX ON PARTNERS (PARTNER1 ASC);",
			"CREATE INDEX ON PARTNERS (PARTNER2 ASC);",
			"CREATE INDEX ON PARTNERS (TO_DATE_PID ASC);",
			"CREATE INDEX ON PERSON_EVENTS (EVENT_PID ASC);",
			"CREATE INDEX ON PERSON_EVENTS (EVENT_ROLE_PID ASC);",
			"CREATE INDEX ON PERSON_EVENTS (LANGUAGE_PID ASC);",
			"CREATE INDEX ON PERSON_EVENTS (PERSON_PID ASC);",
			"CREATE INDEX ON PERSON_NAME_MAPS (NAME_STYLE_PID ASC);",
			"CREATE INDEX ON PERSON_NAME_PARTS (NAME_PID ASC);",
			"CREATE INDEX ON PERSON_NAMES (FROM_DATE_PID ASC);",
			"CREATE INDEX ON PERSON_NAMES (NAME_STYLE_PID ASC);",
			"CREATE INDEX ON PERSON_NAMES (PERSON_PID ASC);",
			"CREATE INDEX ON PERSON_NAMES (TO_DATE_PID ASC);",
			"CREATE INDEX ON PERSONS (BIRTH_DATE_PID ASC);",
			"CREATE INDEX ON PERSONS (DEATH_DATE_PID ASC);",
			"CREATE INDEX ON SEXES (FROM_DATE_PID ASC);",
			"CREATE INDEX ON SEXES (PERSON_PID ASC);",
			"CREATE INDEX ON SEXES (SEX_TYPE_PID ASC);",
			"CREATE INDEX ON SEXES (TO_DATE_PID ASC);",
			"CREATE INDEX ON USERIDS (PERSON_PID ASC);",
			"CREATE UNIQUE INDEX ON COMMIT_LOGS (COMMIT_LOG_PID ASC);",
			"CREATE UNIQUE INDEX ON COMMIT_LOGS (COMMIT_LOG_PID ASC);",
			"CREATE UNIQUE INDEX ON DICTIONARY (DICTIONARY_PID ASC);",
			"CREATE UNIQUE INDEX ON EVENT_ROLES (EVENT_ROLE_PID ASC);",
			"CREATE UNIQUE INDEX ON EVENT_TYPES (EVENT_TYPE_PID ASC);",
			"CREATE UNIQUE INDEX ON EVENTS (EVENT_PID ASC);",
			"CREATE UNIQUE INDEX ON HDATES (HDATE_PID ASC);",
			"CREATE UNIQUE INDEX ON LANGUAGES (ISOCODE ASC);",
			"CREATE UNIQUE INDEX ON LANGUAGES (LANGUAGE_PID ASC);",
			"CREATE UNIQUE INDEX ON LOCATION_EVENTS (LOCATION_EVENTS_PID ASC);",
			"CREATE UNIQUE INDEX ON LOCATION_NAME_MAPS (LOCATION_NAME_MAP_PID ASC);",
			"CREATE UNIQUE INDEX ON LOCATION_NAME_PARTS (LOCATION_NAME_PART_PID ASC);",
			"CREATE UNIQUE INDEX ON LOCATION_NAME_STYLES (LOCATION_NAME_STYLE_PID ASC);",
			"CREATE UNIQUE INDEX ON LOCATION_NAMES (LOCATION_NAME_PID ASC);",
			"CREATE UNIQUE INDEX ON LOCATIONS (LOCATION_PID ASC);",
			"CREATE UNIQUE INDEX ON PARENT_ROLES (PARENT_ROLE_PID ASC);",
			"CREATE UNIQUE INDEX ON PARENTS (PARENT_PID ASC);",
			"CREATE UNIQUE INDEX ON PARTNER_ROLES (PARTNER_ROLE_PID ASC);",
			"CREATE UNIQUE INDEX ON PARTNERS (PARTNER_PID ASC);",
			"CREATE UNIQUE INDEX ON PERSON_EVENTS (PERSON_EVENT_PID ASC);",
			"CREATE UNIQUE INDEX ON PERSON_NAME_MAPS (NAME_MAP_PID ASC);",
			"CREATE UNIQUE INDEX ON PERSON_NAME_PARTS (NAME_PART_PID ASC);",
			"CREATE UNIQUE INDEX ON PERSON_NAME_STYLES (NAME_STYLE_PID ASC);",
			"CREATE UNIQUE INDEX ON PERSON_NAMES (NAME_PID ASC);",
			"CREATE UNIQUE INDEX ON PERSONS (PERSON_PID ASC);",
			"CREATE UNIQUE INDEX ON SEX_TYPES (SEX_TYPE_PID ASC);",
			"CREATE UNIQUE INDEX ON SEXES (SEXES_PID ASC);",
			"CREATE UNIQUE INDEX ON USERIDS (USERID_PID ASC);" };

	private static final String[] constraintsStatementArray = {
			"ALTER TABLE SEXES ADD PRIMARY KEY (SEXES_PID);",
			"ALTER TABLE LOCATION_NAMES ADD PRIMARY KEY (LOCATION_NAME_PID);",
			"ALTER TABLE PERSON_NAME_STYLES ADD PRIMARY KEY (NAME_STYLE_PID);",
			"ALTER TABLE LANGUAGES ADD PRIMARY KEY (LANGUAGE_PID);",
			"ALTER TABLE USERIDS ADD PRIMARY KEY (USERID_PID);",
			"ALTER TABLE PERSON_NAMES ADD UNIQUE (NAME_PID);",
			"ALTER TABLE LOCATION_NAME_STYLES ADD PRIMARY KEY (LOCATION_NAME_STYLE_PID);",
			"ALTER TABLE USERIDS ADD UNIQUE (USERID_PID);",
			"ALTER TABLE PERSON_NAME_PARTS ADD PRIMARY KEY (NAME_PART_PID);",
			"ALTER TABLE LOCATION_NAME_PARTS ADD PRIMARY KEY (LOCATION_NAME_PART_PID);",
			"ALTER TABLE PERSON_NAME_MAPS ADD PRIMARY KEY (NAME_MAP_PID);",
			"ALTER TABLE PARTNER_ROLES ADD UNIQUE (PARTNER_ROLE_PID);",
			"ALTER TABLE PARENT_ROLES ADD UNIQUE (PARENT_ROLE_PID);",
			"ALTER TABLE PERSON_EVENTS ADD PRIMARY KEY (PERSON_EVENT_PID);",
			"ALTER TABLE LOCATION_NAMES ADD UNIQUE (LOCATION_NAME_PID);",
			"ALTER TABLE DICTIONARY ADD PRIMARY KEY (DICTIONARY_PID);",
			"ALTER TABLE EVENT_ROLES ADD UNIQUE (EVENT_ROLE_PID);",
			"ALTER TABLE PARENT_ROLES ADD PRIMARY KEY (PARENT_ROLE_PID);",
			"ALTER TABLE HDATES ADD PRIMARY KEY (HDATE_PID);",
			"ALTER TABLE LOCATIONS ADD PRIMARY KEY (LOCATION_PID);",
			"ALTER TABLE LANGUAGES ADD UNIQUE (ISOCODE);",
			"ALTER TABLE EVENT_TYPES ADD PRIMARY KEY (EVENT_TYPE_PID);",
			"ALTER TABLE PERSONS ADD PRIMARY KEY (PERSON_PID);",
			"ALTER TABLE EVENT_TYPES ADD UNIQUE (EVENT_TYPE_PID);",
			"ALTER TABLE EVENT_ROLES ADD PRIMARY KEY (EVENT_ROLE_PID);",
			"ALTER TABLE LOCATIONS ADD UNIQUE (LOCATION_PID);",
			"ALTER TABLE HDATES ADD UNIQUE (HDATE_PID);",
			"ALTER TABLE PERSON_NAME_STYLES ADD UNIQUE (NAME_STYLE_PID);",
			"ALTER TABLE PARTNER_ROLES ADD PRIMARY KEY (PARTNER_ROLE_PID);",
			"ALTER TABLE LOCATION_NAME_MAPS ADD PRIMARY KEY (LOCATION_NAME_MAP_PID);",
			"ALTER TABLE EVENTS ADD UNIQUE (EVENT_PID);",
			"ALTER TABLE LOCATION_NAME_STYLES ADD UNIQUE (LOCATION_NAME_STYLE_PID);",
			"ALTER TABLE LOCATION_EVENTS ADD PRIMARY KEY (LOCATION_EVENTS_PID);",
			"ALTER TABLE PERSONS ADD UNIQUE (PERSON_PID);",
			"ALTER TABLE PARENTS ADD PRIMARY KEY (PARENT_PID);",
			"ALTER TABLE PARTNERS ADD PRIMARY KEY (PARTNER_PID);",
			"ALTER TABLE PERSON_NAMES ADD PRIMARY KEY (NAME_PID);",
			"ALTER TABLE EVENTS ADD PRIMARY KEY (EVENT_PID);",
			"ALTER TABLE COMMIT_LOGS ADD PRIMARY KEY (COMMIT_LOG_PID);",
			"ALTER TABLE SEX_TYPES ADD PRIMARY KEY (SEX_TYPE_PID);",
			"ALTER TABLE PERSON_NAMES ADD FOREIGN KEY (PERSON_PID) REFERENCES PERSONS (PERSON_PID) ON DELETE RESTRICT ON UPDATE RESTRICT;",
			"ALTER TABLE PARENTS ADD FOREIGN KEY (PARENT_ROLE_PID) REFERENCES PARENT_ROLES (PARENT_ROLE_PID) ON DELETE RESTRICT ON UPDATE RESTRICT;",
			"ALTER TABLE PERSON_EVENTS ADD FOREIGN KEY (PERSON_PID) REFERENCES PERSONS (PERSON_PID) ON DELETE RESTRICT ON UPDATE RESTRICT;",
			"ALTER TABLE LOCATION_EVENTS ADD FOREIGN KEY (LOCATION_PID) REFERENCES LOCATIONS (LOCATION_PID) ON DELETE RESTRICT ON UPDATE RESTRICT;",
			"ALTER TABLE DICTIONARY ADD FOREIGN KEY (ISO_CODE) REFERENCES LANGUAGES (ISOCODE) ON DELETE RESTRICT ON UPDATE RESTRICT;",
			"ALTER TABLE LOCATION_NAMES ADD FOREIGN KEY (LOCATION_PID) REFERENCES LOCATIONS (LOCATION_PID) ON DELETE RESTRICT ON UPDATE RESTRICT;",
			"ALTER TABLE COMMIT_LOGS ADD FOREIGN KEY (USERID_PID) REFERENCES USERIDS (USERID_PID) ON DELETE RESTRICT ON UPDATE RESTRICT;",
			"ALTER TABLE PERSON_NAME_MAPS ADD FOREIGN KEY (NAME_STYLE_PID) REFERENCES PERSON_NAME_STYLES (NAME_STYLE_PID) ON DELETE RESTRICT ON UPDATE RESTRICT;",
			"ALTER TABLE LOCATION_NAME_MAPS ADD FOREIGN KEY (LOCATION_NAME_STYLE_PID) REFERENCES LOCATION_NAME_STYLES (LOCATION_NAME_STYLE_PID) ON DELETE RESTRICT ON UPDATE RESTRICT;",
			"ALTER TABLE PERSON_EVENTS ADD FOREIGN KEY (EVENT_PID) REFERENCES EVENTS (EVENT_PID) ON DELETE RESTRICT ON UPDATE RESTRICT;",
			"ALTER TABLE PARTNERS ADD FOREIGN KEY (PARTNER2) REFERENCES PERSONS (PERSON_PID) ON DELETE RESTRICT ON UPDATE RESTRICT;",
			"ALTER TABLE SEXES ADD FOREIGN KEY (PERSON_PID) REFERENCES PERSONS (PERSON_PID) ON DELETE RESTRICT ON UPDATE RESTRICT;",
			"ALTER TABLE PERSON_EVENTS ADD FOREIGN KEY (EVENT_ROLE_PID) REFERENCES EVENT_ROLES (EVENT_ROLE_PID) ON DELETE RESTRICT ON UPDATE RESTRICT;",
			"ALTER TABLE LOCATION_NAME_STYLES ADD FOREIGN KEY (TO_DATE_PID) REFERENCES HDATES (HDATE_PID) ON DELETE RESTRICT ON UPDATE RESTRICT;",
			"ALTER TABLE PERSON_NAMES ADD FOREIGN KEY (NAME_STYLE_PID) REFERENCES PERSON_NAME_STYLES (NAME_STYLE_PID) ON DELETE RESTRICT ON UPDATE RESTRICT;",
			"ALTER TABLE PERSON_NAMES ADD FOREIGN KEY (TO_DATE_PID) REFERENCES HDATES (HDATE_PID) ON DELETE RESTRICT ON UPDATE RESTRICT;",
			"ALTER TABLE LOCATIONS ADD FOREIGN KEY (TO_DATE_PID) REFERENCES HDATES (HDATE_PID) ON DELETE RESTRICT ON UPDATE RESTRICT;",
			"ALTER TABLE LOCATION_NAMES ADD FOREIGN KEY (LOCATION_NAME_STYLE_PID) REFERENCES LOCATION_NAME_STYLES (LOCATION_NAME_STYLE_PID) ON DELETE RESTRICT ON UPDATE RESTRICT;",
			"ALTER TABLE PARTNERS ADD FOREIGN KEY (PARTNER_ROLE_PID) REFERENCES PARTNER_ROLES (PARTNER_ROLE_PID) ON DELETE RESTRICT ON UPDATE RESTRICT;",
			"ALTER TABLE LOCATION_NAMES ADD FOREIGN KEY (TO_DATE_PID) REFERENCES HDATES (HDATE_PID) ON DELETE RESTRICT ON UPDATE RESTRICT;",
			"ALTER TABLE PARTNERS ADD FOREIGN KEY (PARTNER1) REFERENCES PERSONS (PERSON_PID) ON DELETE RESTRICT ON UPDATE RESTRICT;",
			"ALTER TABLE EVENT_ROLES ADD FOREIGN KEY (EVENT_TYPE_PID) REFERENCES EVENT_TYPES (EVENT_TYPE_PID) ON DELETE RESTRICT ON UPDATE RESTRICT;",
			"ALTER TABLE LOCATION_NAME_STYLES ADD FOREIGN KEY (FROM_DATE_PID) REFERENCES HDATES (HDATE_PID) ON DELETE RESTRICT ON UPDATE RESTRICT;",
			"ALTER TABLE EVENTS ADD FOREIGN KEY (EVENT_TYPE_PID) REFERENCES EVENT_TYPES (EVENT_TYPE_PID) ON DELETE RESTRICT ON UPDATE RESTRICT;",
			"ALTER TABLE PARTNERS ADD FOREIGN KEY (FROM_DATE_PID) REFERENCES HDATES (HDATE_PID) ON DELETE RESTRICT ON UPDATE RESTRICT;",
			"ALTER TABLE PERSON_NAMES ADD FOREIGN KEY (FROM_DATE_PID) REFERENCES HDATES (HDATE_PID) ON DELETE RESTRICT ON UPDATE RESTRICT;",
			"ALTER TABLE USERIDS ADD FOREIGN KEY (PERSON_PID) REFERENCES PERSONS (PERSON_PID) ON DELETE RESTRICT ON UPDATE RESTRICT;",
			"ALTER TABLE LOCATION_NAME_PARTS ADD FOREIGN KEY (LOCATION_NAME_PID) REFERENCES LOCATION_NAMES (LOCATION_NAME_PID) ON DELETE RESTRICT ON UPDATE RESTRICT;",
			"ALTER TABLE PERSONS ADD FOREIGN KEY (BIRTH_DATE_PID) REFERENCES HDATES (HDATE_PID) ON DELETE RESTRICT ON UPDATE RESTRICT;",
			"ALTER TABLE PARENTS ADD FOREIGN KEY (PARENT) REFERENCES PERSONS (PERSON_PID) ON DELETE RESTRICT ON UPDATE RESTRICT;",
			"ALTER TABLE LOCATIONS ADD FOREIGN KEY (FROM_DATE_PID) REFERENCES HDATES (HDATE_PID) ON DELETE RESTRICT ON UPDATE RESTRICT;",
			"ALTER TABLE PARENTS ADD FOREIGN KEY (CHILD) REFERENCES PERSONS (PERSON_PID) ON DELETE RESTRICT ON UPDATE RESTRICT;",
			"ALTER TABLE PERSON_NAME_PARTS ADD FOREIGN KEY (NAME_PID) REFERENCES PERSON_NAMES (NAME_PID) ON DELETE RESTRICT ON UPDATE RESTRICT;",
			"ALTER TABLE LOCATION_EVENTS ADD FOREIGN KEY (EVENT_PID) REFERENCES EVENTS (EVENT_PID) ON DELETE RESTRICT ON UPDATE RESTRICT;",
			"ALTER TABLE PARTNERS ADD FOREIGN KEY (TO_DATE_PID) REFERENCES HDATES (HDATE_PID) ON DELETE RESTRICT ON UPDATE RESTRICT;",
			"ALTER TABLE PERSONS ADD FOREIGN KEY (DEATH_DATE_PID) REFERENCES HDATES (HDATE_PID) ON DELETE RESTRICT ON UPDATE RESTRICT;",
			"ALTER TABLE LOCATION_NAMES ADD FOREIGN KEY (FROM_DATE_PID) REFERENCES HDATES (HDATE_PID) ON DELETE RESTRICT ON UPDATE RESTRICT;" };

	private static final String[] csvFileNames = { "languages.csv",
			"sextypes.csv", "eventtypes.csv", "eventroles.csv",
			"locationnamestyles.csv", "locationnamemaps.csv",
			"personnamestyles.csv", "personnamemaps.csv", "parentroles.csv",
			"partnerroles.csv", "dictionary.csv" };

	private static final String[] tableNames = { "LANGUAGES", "SEX_TYPES",
			"EVENT_TYPES", "EVENT_ROLES", "LOCATION_NAME_STYLES",
			"LOCATION_NAME_MAPS", "PERSON_NAME_STYLES", "PERSON_NAME_MAPS",
			"PARENT_ROLES", "PARTNER_ROLES", "DICTIONARY" };
	@Inject
	UISynchronize sync;

	Shell shell;

	/**
	 * Constructor
	 *
	 * @param shell
	 *
	 * @throws Exception
	 */
	public ProjectNewDatabaseServer(Shell shell) {
		super();
		this.shell = shell;
	}

	/**
	 * @param monitor
	 * @param counter
	 * @param conn
	 * @return
	 * @throws SQLException
	 * @throws InterruptedException
	 */
	private int createConstraints(IProgressMonitor monitor, int counter,
			Connection conn) throws SQLException, InterruptedException {
		Statement stmt;
		monitor.subTask("Create constraints");
		stmt = conn.createStatement();

		for (final String element : constraintsStatementArray) {
			stmt.execute(element);
			monitor.worked(1);
			Thread.sleep(100);
			counter++;
		}

		stmt.close();
		return counter;
	}

	/**
	 * @param monitor
	 * @param counter
	 * @param conn
	 * @return
	 * @throws SQLException
	 * @throws InterruptedException
	 */
	private int createIndices(IProgressMonitor monitor, int counter,
			Connection conn) throws SQLException, InterruptedException {
		Statement stmt;
		monitor.subTask("Create indices");
		stmt = conn.createStatement();

		for (final String element : createIndicesArray) {
			stmt.execute(element);
			monitor.worked(1);
			Thread.sleep(100);
			counter++;
		}

		stmt.close();
		return counter;
	}

	/**
	 * @param monitor
	 * @param counter
	 * @param conn
	 * @return
	 * @throws SQLException
	 * @throws InterruptedException
	 */
	private int createTables(IProgressMonitor monitor, int counter,
			Connection conn) throws SQLException, InterruptedException {
		monitor.subTask("Create tables");
		final Statement stmt = conn.createStatement();

		for (final String element : createStatementArray) {
			stmt.execute(element);
			monitor.worked(1);
			Thread.sleep(100);
			counter++;
		}

		stmt.close();
		return counter;
	}

	/**
	 * @param monitor
	 * @param counter
	 * @return
	 * @throws SQLException
	 * @throws InterruptedException
	 */
	private int loadMasterData(IProgressMonitor monitor, int counter)
			throws SQLException, InterruptedException {
		monitor.subTask("Load master data");
		for (int i = 0; i < tableNames.length; i++) {

			int rowCount = 0;
			final H2TableProvider provider = new H2TableProvider(tableNames[i]);
			rowCount = provider.importCsv("./" + csvFileNames[i]);
			LOGGER.log(Level.INFO, "{0} rows has been imported from {1}",
					new Object[] { rowCount, csvFileNames[i] });
			monitor.worked(10);
			Thread.sleep(100);
			counter += 10;

		}
		return counter;
	}

	/**
	 * Provide the data
	 *
	 * @param dbName
	 * @throws SQLException
	 */
	public void provide(String dbName) {
		LOGGER.log(Level.INFO, "Provide the data");

		// TODO Only display for stand alone application
		try {
			final ProgressMonitorDialog dialog = new ProgressMonitorDialog(
					shell);
			dialog.run(true, true, monitor -> {
				int counter = 0;

				monitor.beginTask("Create new project " + dbName, 300);
				monitor.subTask("Connect to database manager");
				HreH2ConnectionPool.createNew(dbName);
				Connection conn;

				try {
					monitor.worked(10);
					conn = HreH2ConnectionPool.getConnection();
					monitor.worked(10);
					Thread.sleep(1000);
					counter += 10;

					counter = createTables(monitor, counter, conn);

					if (monitor.isCanceled()) {
						LOGGER.log(Level.INFO, "Project creation canceled");
						return;
					}

					counter = createIndices(monitor, counter, conn);

					if (monitor.isCanceled()) {
						LOGGER.log(Level.INFO, "Project creation canceled");
						return;
					}

					counter = createConstraints(monitor, counter, conn);

					if (monitor.isCanceled()) {
						LOGGER.log(Level.INFO, "Project creation canceled");
						return;
					}

					counter = loadMasterData(monitor, counter);
					LOGGER.log(Level.FINE, "Count is {0}", counter);
					conn.close();

					monitor.worked(10);
					Thread.sleep(2000);
					counter += 10;
					monitor.done();
				} catch (final SQLException e) {
					LOGGER.log(Level.SEVERE, e.toString(), e);
				}
			});
		} catch (final Exception e) {
			LOGGER.log(Level.SEVERE, e.toString(), e);
		}

	}
}